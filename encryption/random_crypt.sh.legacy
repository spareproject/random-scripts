#!/bin/env bash
##########################################################################################################################################################################################
. ../bin/functions.sh
##########################################################################################################################################################################################
function usage {
echo "
${0} - help
-i - input file   defaults to read prompt || takes file
-o - output file  defaults to stdout || takes file
-p - password     defaults to read prompt || takes file

the plan you give it a input set an output and give it a password...
the rest will be auto password length increase for now... 
probably needs two scripts to switch using keys/password to encrypt 

taking this human memorable password 
using it as a password against a random key file - increases the password length multiple options to bruteforce and still requires unencrypting a file to check its valid
password - default password given
input - random selected key from /keys...

switching the password to this new random password... 

definitly needs a -d and -e switch toggle 

the split... 
-d
if decrypt password loops through every key...
attempts to decrypt the input... 
if unencrypted input | grep validity_check == true
continue 
  
-e - if encrypt password 
pick a key at random from the keys folder...
generate a larger password against this 
append a validity check >> on to the end of the input file 

"
exit ${1} 
}
while getopts 'i:o:p:hde' arg;do
  case ${arg} in
    i) INPUT=${OPTARG};;
    o) OUTPUT=${OPTARG};;
    p) PASSWORD=${OPTARG};;
    d) echo stub;;
    e) echo stub;;
    h) usage 0;;
    *) usage 1;;
  esac
done
echo "
debuggery...
INPUT=${INPUT}
OUTPUT=${OUTPUT}
PASSWORD=${PASSWORD}
"
##########################################################################################################################################################################################
# take password - this doesnt need to change
if [[ -z ${PASSWORD} ]];then
  echo -en "password: ";read password;echo ""
  for i in `echo ${password} | grep -o .`;do password_int_array+=(`char-to-int ${i}`);done
  for i in ${password_int_array[@]};do for o in `int-to-binary ${i} | grep -o .`;do password_binary_array+=(${o});done;done
elif [[ -f ${PASSWORD} ]];then
  for i in `xxd -p ${PASSWORD} | grep -o .`;do for o in `hex-to-binary ${i} | grep -o .`;do password_binary_array+=(${o});done;done
fi
for ((i=0;i<${#password_binary_array[@]};i++));do
  if [[ ${i} -lt $((${#password_binary_array[@]} / 2)) ]];then first_half+=(${password_binary_array[${i}]});fi
  if [[ ${i} -ge $((${#password_binary_array[@]} / 2)) ]];then second_half+=(${password_binary_array[${i}]});fi
done
##########################################################################################################################################################################################
# generating a larger password against a random file
# if -e select a random key and pretty much just switch out the aboce for the new and it shouldnt require much updating

KEY="./keys/key`shuf -i 0-9 -n 1`"
echo "KEY: ${KEY}"
for i in `xxd -p ${KEY} | grep -o .`;do for o in `hex-to-binary ${i} | grep -o .`;do key_binary_array+=(${o});done;done
echo ${key_binary_array[@]}


##########################################################################################################################################################################################
# if encrypting the input needs to have 
# right so im either adding the validity check in binary in int at the start of message input or to the actual file
if [[ -z ${INPUT} ]];then
  echo -en "\nenter message: ";read input
  # if encrypt: input+=" VALIDVALIDVALIDECIPSAUCE "
  for i in `echo $input | grep -o .`;do input_int_array+=(`char-to-int ${i}`);done
  for i in ${input_int_array[@]};do for o in `int-to-binary ${i} | grep -o .`;do input_binary_array+=(${o});done;done
elif [[ -f ${INPUT} ]];then
  # if encrypt: echo " VALIDVALIDVALIDEPICSAUCE " >> ${INPUT}
  for i in `xxd -p ${INPUT} | grep -o .`;do for o in `hex-to-binary ${i} | grep -o .`;do input_binary_array+=(${o});done;done
fi
##########################################################################################################################################################################################
# encrypt/decrypt

# i can stick this in functions... pass it an array 

  for ((i=0;i<${#input_binary_array[@]};i++));do
    if [[ ${count} == ${#first_half[@]} ]]; then count=0; fi
    if [[ ${first_half[${count}]} == 0 && ${second_half[${count}]} == 0 ]]; then
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${first_half[${count}]} == 0 ]]; then output_binary_array+=(1); fi
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${first_half[${count}]} == 1 ]]; then output_binary_array+=(0); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${first_half[${count}]} == 0 ]]; then output_binary_array+=(0); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${first_half[${count}]} == 1 ]]; then output_binary_array+=(1); fi
    elif [[ ${first_half[${count}]} == 0 && ${second_half[${count}]} == 1 ]]; then
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${second_half[${count}]} == 0 ]]; then output_binary_array+=(1); fi
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${second_half[${count}]} == 1 ]]; then output_binary_array+=(0); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${second_half[${count}]} == 0 ]]; then output_binary_array+=(0); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${second_half[${count}]} == 1 ]]; then output_binary_array+=(1); fi
    elif [[ ${first_half[${count}]} == 1 && ${second_half[${count}]} == 0 ]]; then
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${first_half[${count}]} == 0 ]]; then output_binary_array+=(0); fi
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${first_half[${count}]} == 1 ]]; then output_binary_array+=(1); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${first_half[${count}]} == 0 ]]; then output_binary_array+=(1); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${first_half[${count}]} == 1 ]]; then output_binary_array+=(0); fi
    elif [[ ${first_half[${count}]} == 1 && ${second_half[${count}]} == 1 ]]; then
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${second_half[${count}]} == 0 ]]; then output_binary_array+=(0); fi
      if [[ ${input_binary_array[${i}]} == 0 ]] && [[ ${second_half[${count}]} == 1 ]]; then output_binary_array+=(1); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${second_half[${count}]} == 0 ]]; then output_binary_array+=(1); fi
      if [[ ${input_binary_array[${i}]} == 1 ]] && [[ ${second_half[${count}]} == 1 ]]; then output_binary_array+=(0); fi
    else echo "you dun goofed";fi
    ((count++))
  done
##########################################################################################################################################################################################
# print debuggery...
count=0;cache=""
  for ((i=0;i<=${#output_binary_array[@]};i++));do
    cache+=${output_binary_array[${i}]}
    ((count++))
    if [[ $count == 8 ]];then output_byte_array+=($cache);count=0;cache="";fi
  done
  for i in ${output_byte_array[@]}; do output_int_array+=(`binary-to-int ${i}`);done
  for i in ${output_int_array[@]}; do output_string+=`int-to-char ${i}`;done
if [[ -z ${OUTPUT} ]];then
    echo "${output_string}" 
  elif [[ ! -f ${OUTPUT} ]];then
    echo ${output_string} > ${OUTPUT}
fi
##########################################################################################################################################################################################
#echo "password... ${password}"
#echo "password_int_array... ${password_int_array[@]}"
#echo "password_binary_array... ${password_binary_array[@]}"
#echo "first_half... ${first_half[@]}"
#echo "second_half... ${second_half[@]}"
#echo "input... ${input}"
#echo "input_int_array... ${input_int_array[@]}"
#echo "input_binary_array... ${input_binary_array[@]}"
#echo "output_byte_array... ${output_byte_array[@]}"
#echo "output_int_array... ${output_int_array[@]}"
#echo "output_string... ${output_string}"a


decrypt needs an entire split with a full on copy and paste of code... 

-d 

while [[ ${VALID} != "TRUE" ]];then

  generate password from file in keys...
  decrypt the input 
  grep the input for validvalidvalidepicsauce < - there all keys that dont contain text





















