#!/bin/env bash
##########################################################################################################################################################################################
. ../bin/functions.sh
##########################################################################################################################################################################################
function usage {
echo -e "${0} - help\n-i -input defaults to read prompt || takes file\n-o -output defaults to stdout || takes file\n-p -password defaults to read prompt || takes file"
exit ${1} 
}
while getopts 'i:o:p:hed' arg;do
  case ${arg} in
    e) FUNCTION=encrypt;;
    d) FUNCTION=decrypt;;
    i) INPUT=${OPTARG};;
    o) OUTPUT=${OPTARG};;
    p) PASSWORD=${OPTARG};;
    h) usage 0;;
    *) usage 1;;
  esac
done

function take_password {

}

if [[ ${FUNCTION} == "encrypt" ]];then
echo encrypt;exit
elif [[ ${FUNCTION} == "decrypt" ]];then
echo decrypt;exit
else echo "error now takes -e or -d"
echo fails;exit
fi

##########################################################################################################################################################################################
# take password
if [[ -z ${PASSWORD} ]];then
  echo -n "password: ";read password;echo ""
  for i in `echo ${password} | grep -o .`;do password_int_array+=(`char-to-int ${i}`);done
  for i in ${password_int_array[@]};do for o in `int-to-binary ${i} | grep -o .`;do password_binary_array+=(${o});done;done
elif [[ -f ${PASSWORD} ]];then
  for i in `xxd -p ${PASSWORD} | grep -o .`;do for o in `hex-to-binary ${i} | grep -o .`;do password_binary_array+=(${o});done;done
fi
for ((i=0;i<${#password_binary_array[@]};i++));do
  if [[ ${i} -lt $((${#password_binary_array[@]} / 2)) ]];then password_first_half_array+=(${password_binary_array[${i}]});fi
  if [[ ${i} -ge $((${#password_binary_array[@]} / 2)) ]];then password_second_half_array+=(${password_binary_array[${i}]});fi
done
##########################################################################################################################################################################################
# take input
if [[ -z ${INPUT} ]];then
  echo -n "enter message: ";read input;echo ""
  for i in `echo $input | grep -o .`;do input_int_array+=(`char-to-int ${o}`);done
  for i in ${input_int_array[@]};do for o in `int-to-binary ${i} | grep -o .`;do input_binary_array+=(${o});done;done
elif [[ -f ${INPUT} ]];then
  #original that works...
  #for i in `xxd -p ${INPUT} | grep -o .`;do for o in `hex-to-binary ${i} | grep -o .`;do input_binary_array+=(${o});done;done


echo debuggery...
declare -a input_line
OLD_IFS=${IFS}
IFS=""
while read i;do
  #IFS=""
  #for o in `echo ${i} | grep -o .`;do echo "${o}nospace";done; echo " "
  #for o in `echo ${i} | grep -o .`;do input_int_array+=(`char-to-int ${o}`);done
  #echo ${input_int_array[@]}
  #echo ${input_int_array[@]}
  input_line+=(${i}) 
done < ${INPUT}
IFS=${OLD_IFS} #IFS=""
for i in ${input_line[@]};do
  for o in `echo ${i} | grep -o .`;do echo "i==${i} : o==${o}"; input_int_array+=(`char-to-int ${o}`);done
  input_int_array+=(12)
done
for i in ${input_int_array[@]};do for o in `int-to-binary ${i} | grep -o .`;do input_binary_array+=(${o});done;done

echo "
debuggery...
input_line: ${input_line[@]}
input_int_array: ${input_int_array[@]}
input_binary_array: ${input_binary_array[@]}
"


fi
##########################################################################################################################################################################################
# encrypt/decrypt
output_binary_array=(`gateway input_binary_array[@] password_first_half_array[@] password_second_half_array[@]`)
##########################################################################################################################################################################################
#print debuggery...
count=0;cache=""
  for ((i=0;i<=${#output_binary_array[@]};i++));do
    ((count++))
    cache+=${output_binary_array[${i}]}
    if [[ $count == 8 ]];then output_byte_array+=($cache);count=0;cache="";fi
  done
  for i in ${output_byte_array[@]}; do output_int_array+=(`binary-to-int ${i}`);done
  for i in ${output_int_array[@]}; do output_string+=`int-to-char ${i}`;done
if [[ -z ${OUTPUT} ]];then
    echo "${output_string}" 
elif [[ ! -f ${OUTPUT} ]];then
  echo "the fuck you not hitting this for?"
  echo -n ${output_string} > ${OUTPUT}
fi
echo "output binary array"
echo ${output_binary_array[@]}
echo ${output_string}

##########################################################################################################################################################################################
