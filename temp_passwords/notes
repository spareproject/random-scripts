totally messed up by starting this here and finishing it in encryption... 




teh plan...

1 random keygen on boot
2 auto login
3 prompt for user password
4 xor gate 

only use would be ssh / gpg / cryptsetup... 

need to auto log root on tty1 so it can prompt for sys wide key crypt
the idea being you dont need a password to login it asks you for one
its not a very secure method of locking keys being lazy gets every node owned on one mistake...
but the alternative rebuilding archiso + key share folder would take far to long to build all the images
unless blank passwords rm -r /all/keys.... so quick boot removes network functionality 
could expand to weak passwords doing the same and is the only solution to the lulz of 
auto login / lack of any hardened setup 

grsec kernel acually works and is easy to setup selinux on the other hand was not...
bar chasing the arch kernel updates i have no excuse for not forcing grsec 
but so far the only options are one or the other because i cant increase /boot size to fir both kernels

/tmp/keys/....
holds 13 different (insert max entropy available here) length keys on boot
root locks tty1
it still relies on the user not being a tard and closing the script 
and being able to execute a script on getty autologin
quick boot removes keys / weak password 
decent random password on boot hashes the password against it and crypts all the keys against a shuf 0-13 key
alias the commands that use these keys to prompt for unencrypt then background sleep rm unencrypted key 
and run the original command... 

solves some problems and doesnt involve an entire hardened setup to stop browsers stealing keys...

ideally means this script needs to have systemctl start systemd-network in it... 
it should do the whole safe mode boot untill the user attempts to encrypt keys that are persistent across nodes

the entire idea behind one iso boot was more a dev friendly environment / home network setup not really security 












